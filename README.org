* CBC-casper abstract message lib
:PROPERTIES:
:MODIFIED: [2018-11-01 Thu 14:23]
:END:

Minimal message and safe state creation, maintenance and transition based on
https://github.com/ethereum/research/blob/master/papers/CasperTFG/CasperTFG.pdf

The purpose of this library is to abstractly define the CBC-Casper message
stucture and define functions for the construction and proper execution of
protocols of the casper family. We aimed at pushing as much functionality as
possible directly to the abstract message layer, in such a way that a developer
can create a protocol of the casper family of protocols fairly easy based upon
this library.

The design decision was to be as general as possible, and leave all the specific
stuff for the implementer of the protocol. For the time being, we aimed at
mathematical correctness, and mostly purely functional protocol executions,
rather than on performance.

Basically the developer has to implement the CasperMsg trait in order to
benefit from the casper-cbc safety proofs. But in order to implement that trait,
he will have to fulfill many other conditions, such as implement the Estimate
trait for the estimate and Data trait if the estimate carries data. Data trait
is controversial and might get dropped. And also implement the Sender trait.

One generic type implementing the CasperMsg trait, namely Message, is also
provided that helps getting to a compliant CasperMsg trait concrete
implementation easily.

We present an example of a naive blockchain implementation, a binary consensus,
and an integer consensus using this library, that use the generic type
Message<Estimate, Sender> implementation to generate the protocols.

In order to get started using the library, the best way is to study the examples
folder. This library is experimental and might change dramatically.

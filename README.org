* CBC-casper abstract message lib
:PROPERTIES:
:MODIFIED: [2018-08-28 Tue 20:11]
:END:

Minimal message and safe state creation and maintenance based on
https://github.com/ethereum/research/blob/master/papers/CasperTFG/CasperTFG.pdf

The purpose of this library is to implement the CBC-Casper message stucture and
function. We aimed at pushing as much functionality as possible directly to the
abstract message layer, in such a way that a developer can create a protocol of
the casper family of protocols fairly easy based upon this library.

The design decision was to be as general as possible, and leave all the specific
stuff for the implementer of the protocol. Basically the developer has to
implement the CasperMsg trait in order to benefit from the casper-cbc safety
proofs. But in order to implement that trait, he will have to fulfill many other
conditions, such as implement the Estimate trait for the estimate and Data trait
if the estimate carries data.

One generic type implementing the CasperMsg trait, namely Message, is also
provided that helps getting to a compliant CasperMsg trait easily.

We present an example of a simple blockchain implementation using this protocol
that use the generic type implementation to generate the protocol.

GHOST is implemented at the abstract message layer.

** TODOs
- H(msg) -> Future<pointer> // make it lazy, such that msgs get loaded only when needed
- use quickcheck as a pseudo-theorem prover to prove properties of the
  implementation (and not of the protocol per se)
